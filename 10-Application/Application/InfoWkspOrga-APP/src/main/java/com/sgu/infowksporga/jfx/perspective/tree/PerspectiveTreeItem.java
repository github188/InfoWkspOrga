package com.sgu.infowksporga.jfx.perspective.tree;

import org.springframework.data.domain.Persistable;

import com.sgu.core.framework.util.Util;
import com.sgu.infowksporga.business.entity.Workspace;
import com.sgu.infowksporga.jfx.perspective.tree.vo.AbstractItemVo;
import com.sgu.infowksporga.jfx.perspective.tree.vo.StringItemVo;
import com.sgu.infowksporga.jfx.perspective.tree.vo.WorkspaceItemVo;

import javafx.scene.control.TreeItem;

/**
 * The Class PerspectiveTreeItem.
 */
public class PerspectiveTreeItem extends TreeItem<AbstractItemVo> implements Comparable<PerspectiveTreeItem> {

  /**
   * The Constructor.
   */
  public PerspectiveTreeItem() {

  }

  /**
   * The Constructor.
   *
   * @param treeNodeIdentifier the tree node identifier
   * @param userObject the user object
   */
  public PerspectiveTreeItem(final long treeNodeIdentifier, final Workspace workspace) {
    super(null);
    setWorkspace(new WorkspaceItemVo(treeNodeIdentifier, workspace));
  }

  /**
   * The Constructor.
   *
   * @param treeNodeIdentifier the tree node identifier
   * @param userObject the user object
   */
  public PerspectiveTreeItem(final int treeNodeIdentifier, final String userObject) {
    super(null);
    setString(new StringItemVo(treeNodeIdentifier, userObject));
  }

  /**
   * {@inheritDoc}
   */
  protected Object getNewItem() {
    return new PerspectiveTreeItem();
  }

  /**
   * Gets the workspace.
   *
   * @return the workspace
   */
  public Workspace getWorkspace() {
    return ((WorkspaceItemVo) getValue()).getWorkspace();
  }

  /**
   * Gets the workspace.
   *
   * @return the workspace
   */
  public WorkspaceItemVo getWorkspaceItemVo() {
    return (WorkspaceItemVo) getValue();
  }

  /**
   * Sets the workspace.
   *
   * @param workspace the workspace
   */
  public void setWorkspace(final WorkspaceItemVo workspaceItemVo) {
    setValue(workspaceItemVo);
  }

  /**
   * Sets the workspace.
   *
   * @param workspace the workspace
   */
  public void setString(final StringItemVo stringItemVo) {
    setValue(stringItemVo);
  }

  /**
   * autogenerated by CodeHaggis (http://sourceforge.net/projects/haggis), overwrite equals()
   *
   * @param obj object to compare
   * @return boolean returns a boolean value, which calculates, if the objects are equal.
   */
  @Override
  public boolean equals(final Object obj) {

    if (obj != null) {
      final PerspectiveTreeItem castedObj = (PerspectiveTreeItem) obj;
      return Util.isEqual(this.getValue(), castedObj.getValue());
    }
    else {
      return Util.isEqual(this.getValue(), null);
    }

  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int compareTo(final PerspectiveTreeItem o) {
    if (this.equals(o)) {
      return 0;
    }

    if (o != null) {
      final Persistable userObject = (Persistable) this.getValue();
      final Persistable oUserObject = (Persistable) o.getValue();

      final int result = ((PerspectiveTreeItem) userObject.getId()).compareTo((PerspectiveTreeItem) oUserObject.getId());
      return result;

    }

    return -1;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int hashCode() {
    if (this.getValue() != null) {
      return getValue().hashCode();
    }

    return 0;
  }

}
