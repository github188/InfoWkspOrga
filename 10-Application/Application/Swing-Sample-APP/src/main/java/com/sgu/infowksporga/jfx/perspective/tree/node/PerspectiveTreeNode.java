package com.sgu.infowksporga.jfx.perspective.tree.node;

import org.springframework.data.domain.Persistable;

import com.sgu.core.framework.gui.swing.tree.GTreeNode;
import com.sgu.core.framework.util.Util;
import com.sgu.infowksporga.business.entity.Workspace;
import com.sgu.infowksporga.jfx.perspective.tree.nodevo.StringNodeVo;
import com.sgu.infowksporga.jfx.perspective.tree.nodevo.WorkspaceNodeVo;

/**
 * Description : Perspective Tree Node class<br>
 * Specific node used to describe Perspective Tree hierarchy.
 */
public class PerspectiveTreeNode extends GTreeNode implements Comparable<PerspectiveTreeNode> {

  /** The attribute serialVersionUID. */
  private static final long serialVersionUID = 6486096951110507076L;

  /**
   * Constructor<br>.
   */
  public PerspectiveTreeNode() {
    super();
  }

  /**
   * The Constructor.
   *
   * @param treeNodeIdentifier the tree node identifier
   * @param userObject the user object
   */
  public PerspectiveTreeNode(final long treeNodeIdentifier, final Workspace workspace) {
    super(null);
    setWorkspace(new WorkspaceNodeVo(treeNodeIdentifier, workspace));
  }

  /**
   * The Constructor.
   *
   * @param treeNodeIdentifier the tree node identifier
   * @param userObject the user object
   */
  public PerspectiveTreeNode(final int treeNodeIdentifier, final String userObject) {
    super(null);
    setString(new StringNodeVo(treeNodeIdentifier, userObject));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  protected Object getNewGTreeNode() {
    return new PerspectiveTreeNode();
  }

  /**
   * Gets the workspace.
   *
   * @return the workspace
   */
  public Workspace getWorkspace() {
    return ((WorkspaceNodeVo) getUserObject()).getWorkspace();
  }

  /**
   * Gets the workspace.
   *
   * @return the workspace
   */
  public WorkspaceNodeVo getWorkspaceNodeVo() {
    return (WorkspaceNodeVo) getUserObject();
  }

  /**
   * Sets the workspace.
   *
   * @param workspace the workspace
   */
  public void setWorkspace(final WorkspaceNodeVo workspaceNodeVo) {
    setUserObject(workspaceNodeVo);
  }

  /**
   * Sets the workspace.
   *
   * @param workspace the workspace
   */
  public void setString(final StringNodeVo stringNodeVo) {
    setUserObject(stringNodeVo);
  }

  /**
   * autogenerated by CodeHaggis (http://sourceforge.net/projects/haggis), overwrite equals()
   *
   * @param obj object to compare
   * @return boolean returns a boolean value, which calculates, if the objects are equal.
   */
  @Override
  public boolean equals(final Object obj) {

    if (obj != null) {
      final PerspectiveTreeNode castedObj = (PerspectiveTreeNode) obj;
      return Util.isEqual(this.getUserObject(), castedObj.getUserObject());
    }
    else {
      return Util.isEqual(this.getUserObject(), null);
    }

  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int compareTo(final PerspectiveTreeNode o) {
    if (this.equals(o)) {
      return 0;
    }

    if (o != null) {
      final Persistable userObject = (Persistable) this.getUserObject();
      final Persistable oUserObject = (Persistable) o.getUserObject();

      final int result = ((PerspectiveTreeNode) userObject.getId()).compareTo((PerspectiveTreeNode) oUserObject.getId());
      return result;

    }

    return -1;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int hashCode() {
    if (this.getUserObject() != null) {
      return getUserObject().hashCode();
    }

    return 0;
  }

}
