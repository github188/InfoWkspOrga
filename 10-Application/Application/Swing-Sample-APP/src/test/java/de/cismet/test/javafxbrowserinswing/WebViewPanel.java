package de.cismet.test.javafxbrowserinswing;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import net.infonode.docking.DockingWindow;
import net.infonode.docking.DockingWindowListener;
import net.infonode.docking.OperationAbortedException;
import net.infonode.docking.View;

public class WebViewPanel extends javax.swing.JPanel implements ComponentListener, DockingWindowListener {

  private JFXPanel jfxPanel;
  private WebView wbvBrowser;
  private WebEngine webEngine;
  private Scene scene;
  private boolean sceneSet = false;
  private JPopupMenu popupMenu;
  private JMenuItem mnuItem_openInExternalBrowser;
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane scpLog;
  private javax.swing.JTextArea txaLog;
  // End of variables declaration//GEN-END:variables

  public WebViewPanel() {
    initComponents();

    initComponents2();

    addComponentListener(this);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    scpLog = new javax.swing.JScrollPane();
    txaLog = new javax.swing.JTextArea();

    setLayout(new java.awt.BorderLayout());

    txaLog.setColumns(20);
    txaLog.setRows(5);
    scpLog.setViewportView(txaLog);

    add(scpLog, java.awt.BorderLayout.PAGE_END);
  } // </editor-fold>//GEN-END:initComponents

  private void initComponents2() {
    jfxPanel = new JFXPanel();
    jfxPanel.setBackground(Color.red);

    mnuItem_openInExternalBrowser = new JMenuItem("Open in browser");
    mnuItem_openInExternalBrowser.addActionListener(new ActionListener() {

      @Override
      public void actionPerformed(final ActionEvent e) {
        JOptionPane.showMessageDialog(jfxPanel, "Tada!");
      }
    });

    popupMenu = new JPopupMenu();
    popupMenu.add(mnuItem_openInExternalBrowser);

    jfxPanel.add(popupMenu);
    jfxPanel.addMouseListener(new PopupListener(popupMenu));

    add(jfxPanel, BorderLayout.CENTER);

    // Build the scene in JavaFX Event Thread
    Platform.runLater(new Runnable() {

      @Override
      public void run() {
        // final Group root = new Group();
        // scene = new Scene(root);

        wbvBrowser = new WebView();
        webEngine = wbvBrowser.getEngine();

        scene = new Scene(wbvBrowser);

        jfxPanel.setScene(scene);
      }
    });
  }

  public void load(final String page) {
    setScene();

    Platform.runLater(new Runnable() {

      @Override
      public void run() {
        if ((page == null) || (page.trim().length() == 0)) {
          webEngine.reload();
        }
        else {
          webEngine.load(page);
        }
      }
    });
  }

  private void setScene() {
    if (!sceneSet) {
      jfxPanel.setScene(scene);
      sceneSet = true;
    }
  }

  protected class PopupListener extends MouseAdapter {
    private JPopupMenu menu;

    public PopupListener(final JPopupMenu menu) {
      this.menu = menu;
    }

    @Override
    public void mousePressed(final MouseEvent e) {
      txaLog.append("mousePressed(" + e + ");\n");
      showPopup(e);
    }

    @Override
    public void mouseReleased(final MouseEvent e) {
      txaLog.append("mouseReleased(" + e + ");\n");
      showPopup(e);
    }

    private void showPopup(final MouseEvent e) {
      txaLog.append("showPopup(" + e + ");\n");
      if (e.isPopupTrigger() && (menu != null)) {
        txaLog.append(" e.isPopupTrigger(): " + e.isPopupTrigger() + ", menu != null: " + (menu != null) + ";\n");
        menu.show(e.getComponent(), e.getX(), e.getY());
      }
    }
  }

  @Override
  public void componentResized(final ComponentEvent e) {
    printStackTrace("RESIZED");
  }

  @Override
  public void componentMoved(final ComponentEvent e) {
    printStackTrace("MOVED");
  }

  @Override
  public void componentShown(final ComponentEvent e) {
    printStackTrace("SHOWN");
  }

  @Override
  public void componentHidden(final ComponentEvent e) {
    printStackTrace("HIDDEN");
  }

  @Override
  public void windowAdded(final DockingWindow addedToWindow, final DockingWindow addedWindow) {
    printStackTrace("windowAdded");
  }

  @Override
  public void windowRemoved(final DockingWindow removedFromWindow, final DockingWindow removedWindow) {
    printStackTrace("windowRemoved");
  }

  @Override
  public void windowShown(final DockingWindow window) {
    printStackTrace("windowShown");
    setScene();
  }

  @Override
  public void windowHidden(final DockingWindow window) {
    printStackTrace("windowHidden");
  }

  @Override
  public void viewFocusChanged(final View previouslyFocusedView, final View focusedView) {
    printStackTrace("viewFocusChanged");
  }

  @Override
  public void windowClosing(final DockingWindow window) throws OperationAbortedException {
    printStackTrace("windowClosing");
  }

  @Override
  public void windowClosed(final DockingWindow window) {
    printStackTrace("windowClosed");
  }

  @Override
  public void windowUndocking(final DockingWindow window) throws OperationAbortedException {
    printStackTrace("windowUndocking");

    remove(jfxPanel);
    jfxPanel = new JFXPanel();
    jfxPanel.add(popupMenu);
    jfxPanel.addMouseListener(new PopupListener(popupMenu));
    sceneSet = false;
  }

  @Override
  public void windowUndocked(final DockingWindow window) {
    printStackTrace("windowUndocked");

    setScene();
  }

  @Override
  public void windowDocking(final DockingWindow window) throws OperationAbortedException {
    printStackTrace("windowDocking");
  }

  @Override
  public void windowDocked(final DockingWindow window) {
    printStackTrace("windowDocked");
  }

  @Override
  public void windowMinimizing(final DockingWindow window) throws OperationAbortedException {
    printStackTrace("windowMinimizing");
  }

  @Override
  public void windowMinimized(final DockingWindow window) {
    printStackTrace("windowMinimized");
  }

  @Override
  public void windowMaximizing(final DockingWindow window) throws OperationAbortedException {
    printStackTrace("windowMaximizing");
  }

  @Override
  public void windowMaximized(final DockingWindow window) {
    printStackTrace("windowMaximized");
  }

  @Override
  public void windowRestoring(final DockingWindow window) throws OperationAbortedException {
    printStackTrace("windowRestoring");
  }

  @Override
  public void windowRestored(final DockingWindow window) {
    printStackTrace("windowRestored");
  }

  private void printStackTrace(final String message) {
    System.err.println(message + "\n\n");
    (new Exception(Thread.currentThread().toString())).printStackTrace();
  }
}
