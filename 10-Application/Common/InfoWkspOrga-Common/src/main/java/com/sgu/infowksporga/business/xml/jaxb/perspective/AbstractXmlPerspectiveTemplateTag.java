package com.sgu.infowksporga.business.xml.jaxb.perspective;

import java.io.Serializable;

/**
 * Description : AbstractXmlWorkspacesTreeTag class<br>
 */
public abstract class AbstractXmlPerspectiveTemplateTag implements Serializable {

  /**
   * The attribute serialVersionUID
   */
  private static final long serialVersionUID = 4267287081012706725L;

  /**
   * The parent for this element
   */
  private AbstractXmlPerspectiveTemplateTag parent;

  /**
   * Constructor<br>
   */
  public AbstractXmlPerspectiveTemplateTag() {

  }

  /**
   * @see #parent
   * @return the parent : See field description
   */
  public AbstractXmlPerspectiveTemplateTag getParent() {
    return parent;
  }

  /**
   * @see #parent
   * @param parent : See field description
   */
  public void setParent(final AbstractXmlPerspectiveTemplateTag parent) {
    this.parent = parent;
  }

  /**
   * Description : getXmlPreferencesAtThisLevel method <br>
   *
   * @return Map <Code_Pref, XmlPreference>
   */
  /*
   * public Map<String, XmlPreference> getXmlPreferencesAtThisLevel() {
   * final Map<String, XmlPreference> preferences = new HashMap<String, XmlPreference>();
   * searchXmlPreferences(this, preferences);
   * return preferences;
   * }
   */

  /**
   * Description : Recursive searchXmlPreferences method <br>
   *
   * @param tagElement
   * @param preferencesMap
   */
  /*
   * private void searchXmlPreferences(final AbstractXmlPerspectiveTemplateTag tagElement, final Map<String, XmlPreference> preferencesMap)
   * {
   * /*
   * final XmlPreferences currentXmlPreferences = tagElement.getXmlPreferences();
   * if ((currentXmlPreferences != null) && CollectionUtils.isNotEmpty(currentXmlPreferences.getXmlPreferences())) {
   * // We iterate other preferences to search one not already in the Map (We keep the first value found in the up tree)
   * for (final XmlPreference preference : currentXmlPreferences.getXmlPreferences()) {
   * if (!preference.getName().equals(preferencesMap.get(preference.getName()))) {
   * preferencesMap.put(preference.getName(), preference);
   * }
   * }
   * }
   * // We search now on parent
   * if (tagElement.getParent() != null) {
   * searchXmlPreferences(tagElement.getParent(), preferencesMap);
   * }
   * /
   * }
   * /**
   * {@inheritDoc}
   * public XmlPreferences getXmlPreferences() {
   * return new XmlPreferences();
   * }
   */

  /**
   * @autogenerated by CodeHaggis (http://sourceforge.net/projects/haggis)
   * @overwrite toString()
   * @return String returns this object in a String
   */
  @Override
  public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("[ parent:=");
    sb.append(parent.getClass().getName());
    sb.append(']');
    return sb.toString();
  }

}
